# src/routes/chat.py
from flask import Blueprint, request, jsonify
import requests

chat_bp = Blueprint("chat_bp", __name__)

@chat_bp.route("/chat", methods=["POST"])
def chat_ia():
    """
    Endpoint de chat fiscal inteligente (Gemini ou Grok)
    """
    data = request.get_json()
    pergunta = data.get("pergunta")
    api_key = data.get("apiKey")

    if not pergunta:
        return jsonify({"erro": "Pergunta n√£o fornecida."}), 400
    if not api_key:
        return jsonify({"erro": "Chave da API n√£o fornecida."}), 400

    try:
        # Detectar tipo de modelo pela chave
        if api_key.startswith("AIza"):  # Gemini (Google)
            resposta = chamar_gemini(pergunta, api_key)
        elif api_key.startswith("gsk_"):  # Grok (xAI)
            resposta = chamar_grok(pergunta, api_key)
        else:
            return jsonify({"erro": "Chave de API inv√°lida ou n√£o reconhecida."}), 400

        return jsonify({"resposta": resposta}), 200

    except Exception as e:
        return jsonify({"erro": f"Erro ao processar: {str(e)}"}), 500


# üîπ Fun√ß√£o auxiliar - Gemini API
def chamar_gemini(pergunta, api_key):
    """
    Envia pergunta √† API Gemini (Google Generative Language)
    """
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
    headers = {"Content-Type": "application/json"}
    body = {
        "contents": [
            {"parts": [{"text": pergunta}]}
        ]
    }

    response = requests.post(url, headers=headers, json=body)
    if response.status_code == 200:
        data = response.json()
        try:
            return data["candidates"][0]["content"]["parts"][0]["text"]
        except Exception:
            return "A IA respondeu, mas n√£o foi poss√≠vel interpretar o retorno."
    else:
        return f"Erro Gemini: {response.status_code} ‚Üí {response.text}"


# üîπ Fun√ß√£o auxiliar - Grok API
def chamar_grok(pergunta, api_key):
    """
    Envia pergunta √† API Grok (xAI)
    """
    url = "https://api.x.ai/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    body = {
        "model": "grok-beta",
        "messages": [
            {"role": "system", "content": "Voc√™ √© um assistente fiscal especialista em notas fiscais, CNPJ, IR e impostos."},
            {"role": "user", "content": pergunta}
        ]
    }

    response = requests.post(url, headers=headers, json=body)
    if response.status_code == 200:
        data = response.json()
        try:
            return data["choices"][0]["message"]["content"]
        except Exception:
            return "A IA respondeu, mas n√£o foi poss√≠vel interpretar o retorno."
    else:
        return f"Erro Grok: {response.status_code} ‚Üí {response.text}"
